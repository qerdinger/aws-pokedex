AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Pokemon API with Lambda functions for listing and getting Pokemon details

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  PokemonFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.aub.workshop.pokemon.PokemonListHandlerLambda::handleRequest
      Runtime: java11
      CodeUri: PokemonLambda
      MemorySize: 1024
      Timeout: 60
      Policies:
        - DynamoDBReadPolicy:
            TableName: "Pokemons"
        - DynamoDBCrudPolicy:
            TableName: "Pokemons"
      Events:
        PokemonApi:
          Type: Api
          Properties:
            Path: /pokemon
            Method: GET
            RestApiId: !Ref PokemonApi
            Auth:
              ApiKeyRequired: false

  PokemonGetFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: PokemonLambda
      Handler: com.aub.workshop.pokemon.PokemonGetHandlerLambda::handleRequest
      Runtime: java11
      MemorySize: 1024
      Timeout: 60
      Policies:
        - DynamoDBReadPolicy:
            TableName: "Pokemons"
        - DynamoDBCrudPolicy:
            TableName: "Pokemons"
      Events:
        PokemonApi:
          Type: Api
          Properties:
            Path: /pokemon/{id}
            Method: GET
            RestApiId: !Ref PokemonApi

  PokemonApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Pokemon API"
          version: "1.0"
        paths:
          /pokemon:
            get:
              parameters:
                - name: nextPage
                  in: query
                  required: false
                  type: string
                  default: ""
              responses:
                '200':
                  description: "200 response"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PokemonFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
          /pokemon/{id}:
            get:
              responses:
                '200':
                  description: "200 response"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PokemonGetFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

Outputs:
  PokemonApi:
    Description: "API Gateway endpoint URL for Pokemon Function"
    Value: !Sub "https://${PokemonApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/pokemon"
    Export:
      Name: "PokemonApiUrl"
  PokemonFunction:
    Description: "Pokemon List Lambda Function ARN"
    Value: !GetAtt PokemonFunction.Arn
  PokemonGetFunction:
    Description: "Pokemon Get Lambda Function ARN"
    Value: !GetAtt PokemonGetFunction.Arn